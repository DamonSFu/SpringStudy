<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!-- 创建数据源对象DataSource druid C3p0 dbcp-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>

    <!-- 创建SqlSessionFacoty -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 依赖数据源对象-->
        <property name="dataSource" ref="dataSource"/>
        <!-- 依赖mapper文件注册 -->
<!--        <property name="mapperLocations">-->
<!--            <array>-->
<!--                <value>classpath:com/springdao/mapper/UserDAOMapper.xml</value>-->
<!--                <value>classpath:com/springdao/mapper/EmpDAOMapper.xml</value>-->
<!--            </array>-->
<!--        </property>-->
        <!-- 注入mapper文件通用方式 -->
        <property name="mapperLocations" value="classpath:com/springdao/mapper/*.xml"/>
        <!-- 注入别名相关配置 typeAliasesPackage：用来给指定包中所有类起别名 默认的别名：类名/类名首字母小写 -->
        <property name="typeAliasesPackage" value="com.springdao.entity"/>
    </bean>






    <!-- 一次创建项目中所有DAO对象 MapperScannerConfigurer
         MapperScannerConfigurer：
            默认创建对象在工厂中唯一标识：接口的首字母小写
            UserDAO ===> userDAO  Userdao ===> userdao
            OrderDAO ==> orderDAO Orderdao ==> orderdao
            EmpDAO ===> empDAO
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 扫描DAO接口所在的包 -->
        <property name="basePackage" value="com.springdao.dao"/>
    </bean>
<!--    &lt;!&ndash; 创建DAO组件类 &ndash;&gt;-->
<!--    <bean id="userDAO" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
<!--        &lt;!&ndash; 注入SqlSessionFactory &ndash;&gt;-->
<!--        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
<!--        &lt;!&ndash; 注入创建DAO接口类型 注入接口的全限定名 包.接口名 &ndash;&gt;-->
<!--        <property name="mapperInterface" value="com.springdao.dao.UserDAO"/>-->
<!--    </bean>-->
<!--    &lt;!&ndash; 创建DAO组件类 &ndash;&gt;-->
<!--    <bean id="empDAO" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
<!--        &lt;!&ndash; 注入SqlSessionFactory &ndash;&gt;-->
<!--        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
<!--        &lt;!&ndash; 注入创建DAO接口类型 注入接口的全限定名 包.接口名 &ndash;&gt;-->
<!--        <property name="mapperInterface" value="com.springdao.dao.EmpDAO"/>-->
<!--    </bean>-->


    <!-- 管理Service组件 -->
    <bean id="userService" class="com.springdao.service.UserServiceImpl">
        <property name="userDAO" ref="userDAO"/>
<!--        <property name="platformTransactionManager" ref="transactionManager"/>-->
    </bean>

    <!-- 数据源事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据源对象 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    &lt;!&ndash; 注册通知 &ndash;&gt;-->
<!--    <bean id="methodInvokeAdvice" class="com.springdao.adviceSpringdao.MethodInvokeAdvice">-->
<!--        <property name="platformTransactionManager" ref="transactionManager"/>-->
<!--    </bean>-->

    <!-- tx:advice标签
         id：基于事务管理器创建的环绕通知对象在工厂中的唯一标识
         作用：
            1.根据指定的事务管理器在工厂中创建一个事务的环绕通知对象
            2.对业务层方法进行细粒度事务控制
     -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 事务细粒度配置 -->
        <tx:attributes>
            <tx:method name="save"/>
            <tx:method name="delete*"/>
            <tx:method name="update"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置事务切面 -->
    <aop:config>
        <aop:pointcut id="pc" expression="within(com.springdao.service.*ServiceImpl)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
    </aop:config>

</beans>